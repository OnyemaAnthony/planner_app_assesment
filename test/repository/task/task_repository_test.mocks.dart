// Mocks generated by Mockito 5.3.2 from annotations
// in planner_app/test/repository/task/task_repository_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;

import 'package:dartz/dartz.dart' as _i4;
import 'package:mockito/mockito.dart' as _i1;
import 'package:planner_app/models/task/task_request.dart' as _i3;
import 'package:planner_app/models/task/task_response.dart' as _i2;
import 'package:planner_app/repository/task/task_repository.dart' as _i7;
import 'package:planner_app/services/task/task_service.dart' as _i5;
import 'package:planner_app/utils/api_request_failure.dart' as _i8;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeTaskResponse_0 extends _i1.SmartFake implements _i2.TaskResponse {
  _FakeTaskResponse_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTaskRequest_1 extends _i1.SmartFake implements _i3.TaskRequest {
  _FakeTaskRequest_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_2<L, R> extends _i1.SmartFake implements _i4.Either<L, R> {
  _FakeEither_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [TaskService].
///
/// See the documentation for Mockito's code generation for more information.
class MockTaskService extends _i1.Mock implements _i5.TaskService {
  MockTaskService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<_i2.TaskResponse> addTask(_i3.TaskRequest? task) =>
      (super.noSuchMethod(
        Invocation.method(
          #addTask,
          [task],
        ),
        returnValue: _i6.Future<_i2.TaskResponse>.value(_FakeTaskResponse_0(
          this,
          Invocation.method(
            #addTask,
            [task],
          ),
        )),
      ) as _i6.Future<_i2.TaskResponse>);
  @override
  _i6.Future<_i3.TaskRequest> updateTask(_i3.TaskRequest? task) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateTask,
          [task],
        ),
        returnValue: _i6.Future<_i3.TaskRequest>.value(_FakeTaskRequest_1(
          this,
          Invocation.method(
            #updateTask,
            [task],
          ),
        )),
      ) as _i6.Future<_i3.TaskRequest>);
  @override
  _i6.Future<_i2.TaskResponse> getAllTasks() => (super.noSuchMethod(
        Invocation.method(
          #getAllTasks,
          [],
        ),
        returnValue: _i6.Future<_i2.TaskResponse>.value(_FakeTaskResponse_0(
          this,
          Invocation.method(
            #getAllTasks,
            [],
          ),
        )),
      ) as _i6.Future<_i2.TaskResponse>);
}

/// A class which mocks [TaskRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockTaskRepository extends _i1.Mock implements _i7.TaskRepository {
  MockTaskRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<_i4.Either<_i8.ApiRequestFailure, _i2.TaskResponse>> addTask(
          _i3.TaskRequest? task) =>
      (super.noSuchMethod(
        Invocation.method(
          #addTask,
          [task],
        ),
        returnValue: _i6.Future<
                _i4.Either<_i8.ApiRequestFailure, _i2.TaskResponse>>.value(
            _FakeEither_2<_i8.ApiRequestFailure, _i2.TaskResponse>(
          this,
          Invocation.method(
            #addTask,
            [task],
          ),
        )),
      ) as _i6.Future<_i4.Either<_i8.ApiRequestFailure, _i2.TaskResponse>>);
  @override
  _i6.Future<_i4.Either<_i8.ApiRequestFailure, _i3.TaskRequest>> updateTask(
          _i3.TaskRequest? task) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateTask,
          [task],
        ),
        returnValue: _i6.Future<
                _i4.Either<_i8.ApiRequestFailure, _i3.TaskRequest>>.value(
            _FakeEither_2<_i8.ApiRequestFailure, _i3.TaskRequest>(
          this,
          Invocation.method(
            #updateTask,
            [task],
          ),
        )),
      ) as _i6.Future<_i4.Either<_i8.ApiRequestFailure, _i3.TaskRequest>>);
  @override
  _i6.Future<_i4.Either<_i8.ApiRequestFailure, _i2.TaskResponse>>
      getAllTasks() => (super.noSuchMethod(
            Invocation.method(
              #getAllTasks,
              [],
            ),
            returnValue: _i6.Future<
                    _i4.Either<_i8.ApiRequestFailure, _i2.TaskResponse>>.value(
                _FakeEither_2<_i8.ApiRequestFailure, _i2.TaskResponse>(
              this,
              Invocation.method(
                #getAllTasks,
                [],
              ),
            )),
          ) as _i6.Future<_i4.Either<_i8.ApiRequestFailure, _i2.TaskResponse>>);
}
